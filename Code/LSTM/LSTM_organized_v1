{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"gpuType":"T4"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","source":["#Imports and Setup"],"metadata":{"id":"nujXTK0RFqZh"}},{"cell_type":"code","source":["# Ensure the necessary library is installed\n","!pip install pydot\n","!pip install pydotplus\n","!pip install graphviz"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5QH5bHYpUW6o","executionInfo":{"status":"ok","timestamp":1715544135347,"user_tz":240,"elapsed":42137,"user":{"displayName":"Rafiz Sadique","userId":"17589798204125157169"}},"outputId":"bdf262d4-a257-4e9a-a67d-6f6a5fcb9454"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: pydot in /usr/local/lib/python3.10/dist-packages (1.4.2)\n","Requirement already satisfied: pyparsing>=2.1.4 in /usr/local/lib/python3.10/dist-packages (from pydot) (3.1.2)\n","Requirement already satisfied: pydotplus in /usr/local/lib/python3.10/dist-packages (2.0.2)\n","Requirement already satisfied: pyparsing>=2.0.1 in /usr/local/lib/python3.10/dist-packages (from pydotplus) (3.1.2)\n","Requirement already satisfied: graphviz in /usr/local/lib/python3.10/dist-packages (0.20.3)\n"]}]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mfA6e103IkFB","executionInfo":{"status":"ok","timestamp":1715544158541,"user_tz":240,"elapsed":23199,"user":{"displayName":"Rafiz Sadique","userId":"17589798204125157169"}},"outputId":"c0f362a5-a0aa-400c-fe6c-998b4d23ad0f"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","execution_count":3,"metadata":{"id":"Lhx4VXqfEQes","executionInfo":{"status":"ok","timestamp":1715544167183,"user_tz":240,"elapsed":8658,"user":{"displayName":"Rafiz Sadique","userId":"17589798204125157169"}}},"outputs":[],"source":["import numpy as np\n","import pandas as pd\n","import zipfile\n","import os\n","from datetime import datetime\n","import matplotlib.pyplot as plt\n","from sklearn.model_selection import train_test_split\n","import re\n","from gensim.models import Word2Vec\n","import tensorflow as tf\n","from tensorflow.keras.preprocessing.sequence import pad_sequences\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import LSTM, Dense, Dropout, Embedding\n","from tensorflow.keras.optimizers import Adam\n","from tensorflow.keras.callbacks import EarlyStopping\n","from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\n","from imblearn.over_sampling import RandomOverSampler\n","#Visualizations\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","from sklearn.decomposition import PCA\n","import matplotlib.pyplot as plt\n","from tensorflow.keras.utils import plot_model\n","from IPython.display import Image"]},{"cell_type":"code","source":["# Define the base path for the content\n","base_path = '/content/drive/My Drive/519_Project_V1/content/'\n","\n","# Define the paths to the ZIP files\n","zip_path = base_path + 'all_tesla_data.zip'\n","\n","# Unzip and load dataframes\n","dataframes = {}\n","\n","with zipfile.ZipFile(zip_path, 'r') as zipf:\n","    for filename in zipf.namelist():\n","        if filename.endswith('.csv'):\n","            with zipf.open(filename) as file:\n","                df_name = filename.replace('.csv', '').replace('-', '_')\n","                dataframes[df_name] = pd.read_csv(file)\n","\n","# Printing the keys of the loaded dataframes\n","print(\"Keys of loaded dataframes:\")\n","print(dataframes.keys())\n","\n","# Printing the sizes of the loaded dataframes\n","print(\"Sizes of loaded dataframes:\")\n","for name, df in dataframes.items():\n","    print(f\"{name}: {df.shape}\")"],"metadata":{"id":"fMRI4f9EGfdk","executionInfo":{"status":"ok","timestamp":1715544170490,"user_tz":240,"elapsed":3309,"user":{"displayName":"Rafiz Sadique","userId":"17589798204125157169"}},"outputId":"1cbf59aa-e230-4938-cf7b-8391c83b1de7","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["Keys of loaded dataframes:\n","dict_keys(['train_data_w', 'test_data_w', 'train_data_m', 'test_data_m', 'train_data_q', 'test_data_q'])\n","Sizes of loaded dataframes:\n","train_data_w: (100000, 3)\n","test_data_w: (20000, 3)\n","train_data_m: (100000, 3)\n","test_data_m: (20000, 3)\n","train_data_q: (100000, 3)\n","test_data_q: (20000, 3)\n"]}]},{"cell_type":"markdown","source":["#Data Preprocessing"],"metadata":{"id":"BcGSy9VMIEGQ"}},{"cell_type":"code","source":["# Function to clean tweets\n","def clean_tweets(tweet):\n","    tweet = re.sub(\"@[A-Za-z0-9]+\", \"\", tweet)  # Remove @mentions\n","    tweet = re.sub(r\"https?\\:\\/\\/[\\w\\.\\/]+\", \"\", tweet)  # Remove URLs\n","    tweet = re.sub(r\"[^A-Za-z0-9 ]+\", \"\", tweet)  # Remove all non-alphanumeric characters except spaces\n","    tweet = tweet.lower()  # Convert to lowercase to avoid duplicates from capitalization\n","    tweet = \" \".join(tweet.split())  # Remove redundant spaces\n","    return tweet\n","\n","# Apply the cleaning function to each tweet in the DataFrames\n","for name, df in dataframes.items():\n","    df['cleaned_body'] = df['body'].apply(clean_tweets)\n","\n","# Printing the new sizes of the DataFrames after cleaning\n","print(\"New sizes of dataframes after cleaning:\")\n","for name, df in dataframes.items():\n","    print(f\"{name}: {df.shape}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vHDhxaKjIG7N","executionInfo":{"status":"ok","timestamp":1715544178394,"user_tz":240,"elapsed":7921,"user":{"displayName":"Rafiz Sadique","userId":"17589798204125157169"}},"outputId":"89921f6e-a124-464d-8810-25686d07ae0e"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["New sizes of dataframes after cleaning:\n","train_data_w: (100000, 4)\n","test_data_w: (20000, 4)\n","train_data_m: (100000, 4)\n","test_data_m: (20000, 4)\n","train_data_q: (100000, 4)\n","test_data_q: (20000, 4)\n"]}]},{"cell_type":"code","source":["# Remove duplicates based on the 'cleaned_body' column\n","for name, df in dataframes.items():\n","    df.drop_duplicates(subset=['cleaned_body'], inplace=True)\n","\n","# Printing the new sizes of the DataFrames after removing duplicates\n","print(\"New sizes of dataframes after removing duplicates:\")\n","for name, df in dataframes.items():\n","    print(f\"{name}: {df.shape}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8DO7juKSIptR","executionInfo":{"status":"ok","timestamp":1715544178816,"user_tz":240,"elapsed":440,"user":{"displayName":"Rafiz Sadique","userId":"17589798204125157169"}},"outputId":"1be049df-5eea-4cef-e58d-e9741386a9b4"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["New sizes of dataframes after removing duplicates:\n","train_data_w: (97314, 4)\n","test_data_w: (19716, 4)\n","train_data_m: (97314, 4)\n","test_data_m: (19716, 4)\n","train_data_q: (97314, 4)\n","test_data_q: (19716, 4)\n"]}]},{"cell_type":"code","source":["# Randomly select equal number of samples from each label\n","num_samples_per_label = 10000  # This should be adjusted based on your needs and data availability\n","\n","balanced_samples = {}\n","for name, df in dataframes.items():\n","    # Group by the label and sample from each group\n","    grouped = df.groupby('Target')\n","    balanced_samples[name] = pd.concat([group.sample(n=min(num_samples_per_label, len(group)), random_state=42) for label, group in grouped])\n","\n","    # Shuffle the resulting DataFrame to mix the labels well\n","    balanced_samples[name] = balanced_samples[name].sample(frac=1, random_state=42).reset_index(drop=True)\n","\n","# Updating the main dataframes dictionary with the balanced samples\n","dataframes.update(balanced_samples)\n","\n","# Printing the new sizes of the DataFrames after balanced sampling\n","print(\"New sizes of dataframes after balanced sampling:\")\n","for name, df in dataframes.items():\n","    print(f\"{name}: {df.shape}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uUCD4JzcIuGQ","executionInfo":{"status":"ok","timestamp":1715544179107,"user_tz":240,"elapsed":293,"user":{"displayName":"Rafiz Sadique","userId":"17589798204125157169"}},"outputId":"beb6a133-e685-4f84-b2fb-82c122866a7a"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["New sizes of dataframes after balanced sampling:\n","train_data_w: (20000, 4)\n","test_data_w: (19716, 4)\n","train_data_m: (20000, 4)\n","test_data_m: (17493, 4)\n","train_data_q: (20000, 4)\n","test_data_q: (15307, 4)\n"]}]},{"cell_type":"markdown","source":["#Word2Vec"],"metadata":{"id":"my0aG0KPJ_Af"}},{"cell_type":"code","source":["# Prepare the list of tokenized tweets for Word2Vec training\n","# Concatenate all tweets from different datasets into a single list for training\n","all_tweets = []\n","for name, df in dataframes.items():\n","    all_tweets.extend(df['cleaned_body'].apply(lambda x: x.split()).tolist())\n","\n","# Train a Word2Vec model\n","word2vec_model = Word2Vec(sentences=all_tweets, vector_size=100, window=5, min_count=1, workers=4)\n","\n","# Save the model for later use\n","word2vec_model.save(\"/content/drive/My Drive/519_Project_V1/LSTM/word2vec_model.bin\")\n","\n","# Check the word vector for a sample word to ensure training\n","print(\"Vector for the word 'tsla':\")\n","print(word2vec_model.wv['tsla'])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"df3i65g1J-on","executionInfo":{"status":"ok","timestamp":1715544210953,"user_tz":240,"elapsed":31848,"user":{"displayName":"Rafiz Sadique","userId":"17589798204125157169"}},"outputId":"dbc7ff92-3ac7-4d47-b614-6b82f3758473"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["Vector for the word 'tsla':\n","[ 1.1894433   1.0220568   0.06569915  1.5140857  -1.1523015  -1.9588587\n","  0.1068479   0.05434451  0.18805763 -0.34786087  1.8983189  -0.29491436\n","  0.18345867  0.15866253 -1.1048265  -0.8263961   0.00957711 -0.59767807\n"," -0.29141757  0.03286268  1.7894374   2.5776668   2.6061194   0.02838707\n","  0.18452694 -0.9872374   0.31161284  0.3829828   0.61485404  0.41626173\n"," -1.1480935  -0.16112787  1.1707395  -0.9486208  -0.15220314 -1.045486\n","  0.5758371  -0.16782038  1.5326631  -0.8365845  -0.5500525   0.62215006\n"," -1.3728895  -1.5214924   0.6812013   0.8940953  -0.67126995  1.0487653\n","  1.1542915  -0.23989497  0.44641948  0.35611588 -0.8678096   0.40470013\n","  1.7040675   0.21482727 -0.16495094 -0.11619043 -1.2233552   0.6018991\n","  0.18428805  1.5417442  -0.5855126  -0.22471574  1.0070105   0.48717317\n","  1.3673577   0.3566449   0.28450868 -0.5084852  -0.8450772   0.7032309\n"," -0.6752883  -0.28968042 -0.02261639 -0.17366019  0.4017366   0.09972204\n"," -0.5383323   0.22450306  0.66488606  2.0384572   1.0555283   1.0907252\n","  0.99362034  0.02600041  0.7142851   0.82084006 -0.72680867 -0.6481787\n","  0.6190684   1.400197    0.10288249  0.12810308  1.5327269   0.96642685\n"," -1.6180758  -0.55359864 -0.47928026  0.24917944]\n"]}]},{"cell_type":"code","source":["# Function to vectorize a batch of tweets\n","def vectorize_tweets(tweets, word2vec_model, max_length):\n","    vectorized_tweets = []\n","    for tweet in tweets:\n","        tweet_vector = [word2vec_model.wv[word] for word in tweet if word in word2vec_model.wv]\n","        vectorized_tweets.append(tweet_vector)\n","\n","    # Pad the sequences to have the same length\n","    vectorized_tweets = pad_sequences(vectorized_tweets, maxlen=max_length, dtype='float32', padding='post', truncating='post', value=0.0)\n","    return vectorized_tweets\n","\n","# Define the maximum length of a tweet vector sequence\n","max_length = 50  # Adjust based on the average length of your tweets\n","\n","# Vectorize the tweets in each DataFrame and store them\n","vectorized_dataframes = {}\n","for name, df in dataframes.items():\n","    tokenized_tweets = df['cleaned_body'].apply(lambda x: x.split()).tolist()\n","    vectorized_dataframes[name] = vectorize_tweets(tokenized_tweets, word2vec_model, max_length)\n","\n","# Print shapes of the vectorized data\n","for name, vectors in vectorized_dataframes.items():\n","    print(f\"Vectorized data for {name}: {vectors.shape}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tEpY_6zRKvYy","executionInfo":{"status":"ok","timestamp":1715544217224,"user_tz":240,"elapsed":6287,"user":{"displayName":"Rafiz Sadique","userId":"17589798204125157169"}},"outputId":"8b06dfee-f84f-4acf-fee8-210c61dd9b12"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["Vectorized data for train_data_w: (20000, 50, 100)\n","Vectorized data for test_data_w: (19716, 50, 100)\n","Vectorized data for train_data_m: (20000, 50, 100)\n","Vectorized data for test_data_m: (17493, 50, 100)\n","Vectorized data for train_data_q: (20000, 50, 100)\n","Vectorized data for test_data_q: (15307, 50, 100)\n"]}]},{"cell_type":"markdown","source":["#Optimized LSTM model"],"metadata":{"id":"Muy6OvNUMQf0"}},{"cell_type":"code","source":["# Define the optimized LSTM model function\n","def create_optimized_lstm_model(input_shape):\n","    model = Sequential()\n","\n","    # LSTM layer with 64 units\n","    model.add(LSTM(64, return_sequences=True, input_shape=input_shape))\n","    model.add(Dropout(0.25))\n","\n","    # Another LSTM layer with 64 units, without return_sequences to flatten the output\n","    model.add(LSTM(64))\n","    model.add(Dropout(0.25))\n","\n","    # Dense layer for the output\n","    model.add(Dense(32, activation='relu'))\n","    model.add(Dense(1, activation='sigmoid'))  # Use sigmoid for binary classification\n","\n","    # Compile the model with a specified learning rate\n","    optimizer = Adam(learning_rate=0.0025)\n","    model.compile(optimizer=optimizer, loss='binary_crossentropy', metrics=['accuracy'])\n","\n","    return model"],"metadata":{"id":"nlXYCKT9MS0L","executionInfo":{"status":"ok","timestamp":1715544217224,"user_tz":240,"elapsed":16,"user":{"displayName":"Rafiz Sadique","userId":"17589798204125157169"}}},"execution_count":10,"outputs":[]},{"cell_type":"code","source":["# Function to evaluate the model\n","def evaluate_model(model, X_test, y_test):\n","    # Predict the labels for the test set\n","    y_pred = (model.predict(X_test) > 0.5).astype(\"int32\")\n","\n","    # Calculate evaluation metrics\n","    accuracy = accuracy_score(y_test, y_pred)\n","    precision = precision_score(y_test, y_pred)\n","    recall = recall_score(y_test, y_pred)\n","    f1 = f1_score(y_test, y_pred)\n","\n","    return accuracy, precision, recall, f1\n"],"metadata":{"id":"KBF75DDyNAe2","executionInfo":{"status":"ok","timestamp":1715544217224,"user_tz":240,"elapsed":15,"user":{"displayName":"Rafiz Sadique","userId":"17589798204125157169"}}},"execution_count":11,"outputs":[]},{"cell_type":"code","source":["# Dictionary to store performance metrics\n","optimized_performance_metrics = {}\n","\n","# Use the shape of the vectorized data to define the input shape for the LSTM model\n","input_shape = (vectorized_dataframes['train_data_w'].shape[1], vectorized_dataframes['train_data_w'].shape[2])\n","\n","# Create the optimized LSTM model using the defined function\n","optimized_lstm_model = create_optimized_lstm_model(input_shape)\n","\n","# Print the model summary to review the architecture\n","optimized_lstm_model.summary()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0F_KzS7DMWtf","executionInfo":{"status":"ok","timestamp":1715544219450,"user_tz":240,"elapsed":2240,"user":{"displayName":"Rafiz Sadique","userId":"17589798204125157169"}},"outputId":"5126a6f7-893e-4dad-d920-d1d81bc51157"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," lstm (LSTM)                 (None, 50, 64)            42240     \n","                                                                 \n"," dropout (Dropout)           (None, 50, 64)            0         \n","                                                                 \n"," lstm_1 (LSTM)               (None, 64)                33024     \n","                                                                 \n"," dropout_1 (Dropout)         (None, 64)                0         \n","                                                                 \n"," dense (Dense)               (None, 32)                2080      \n","                                                                 \n"," dense_1 (Dense)             (None, 1)                 33        \n","                                                                 \n","=================================================================\n","Total params: 77377 (302.25 KB)\n","Trainable params: 77377 (302.25 KB)\n","Non-trainable params: 0 (0.00 Byte)\n","_________________________________________________________________\n"]}]},{"cell_type":"code","source":["# Train and evaluate for each dataset\n","for key in ['train_data_w', 'train_data_m', 'train_data_q']:\n","    train_key = key\n","    test_key = key.replace('train', 'test')\n","\n","    X_train = vectorized_dataframes[train_key]\n","    y_train = dataframes[train_key]['Target'].values\n","    X_test = vectorized_dataframes[test_key]\n","    y_test = dataframes[test_key]['Target'].values\n","\n","    # Train the model with EarlyStopping for better generalization\n","    early_stopping = EarlyStopping(monitor='val_accuracy', patience=3, restore_best_weights=True)\n","    optimized_lstm_model.fit(X_train, y_train, epochs=20, batch_size=64, validation_split=0.2, callbacks=[early_stopping])\n","\n","    # Evaluate the model\n","    accuracy, precision, recall, f1 = evaluate_model(optimized_lstm_model, X_test, y_test)\n","\n","    # Store the metrics\n","    optimized_performance_metrics[test_key] = {\n","        'Accuracy': accuracy,\n","        'Precision': precision,\n","        'Recall': recall,\n","        'F1 Score': f1\n","    }"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uEIzDab6McIB","executionInfo":{"status":"ok","timestamp":1715544329563,"user_tz":240,"elapsed":110127,"user":{"displayName":"Rafiz Sadique","userId":"17589798204125157169"}},"outputId":"f9a2aa2f-a6a4-402d-fe29-cbf03d85ca31"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/20\n","250/250 [==============================] - 10s 15ms/step - loss: 0.6939 - accuracy: 0.4989 - val_loss: 0.6937 - val_accuracy: 0.4890\n","Epoch 2/20\n","250/250 [==============================] - 3s 11ms/step - loss: 0.6932 - accuracy: 0.5039 - val_loss: 0.6933 - val_accuracy: 0.4890\n","Epoch 3/20\n","250/250 [==============================] - 4s 14ms/step - loss: 0.6931 - accuracy: 0.5049 - val_loss: 0.6932 - val_accuracy: 0.4902\n","Epoch 4/20\n","250/250 [==============================] - 2s 9ms/step - loss: 0.6925 - accuracy: 0.5036 - val_loss: 0.6937 - val_accuracy: 0.4875\n","Epoch 5/20\n","250/250 [==============================] - 2s 10ms/step - loss: 0.6927 - accuracy: 0.5044 - val_loss: 0.6925 - val_accuracy: 0.4888\n","Epoch 6/20\n","250/250 [==============================] - 2s 10ms/step - loss: 0.6923 - accuracy: 0.5004 - val_loss: 0.6921 - val_accuracy: 0.4873\n","617/617 [==============================] - 4s 5ms/step\n","Epoch 1/20\n","250/250 [==============================] - 3s 12ms/step - loss: 0.6933 - accuracy: 0.5081 - val_loss: 0.6935 - val_accuracy: 0.4960\n","Epoch 2/20\n","250/250 [==============================] - 2s 10ms/step - loss: 0.6928 - accuracy: 0.5098 - val_loss: 0.6934 - val_accuracy: 0.4967\n","Epoch 3/20\n","250/250 [==============================] - 2s 10ms/step - loss: 0.6926 - accuracy: 0.5101 - val_loss: 0.6933 - val_accuracy: 0.4960\n","Epoch 4/20\n","250/250 [==============================] - 2s 10ms/step - loss: 0.6926 - accuracy: 0.5096 - val_loss: 0.6932 - val_accuracy: 0.5010\n","Epoch 5/20\n","250/250 [==============================] - 3s 11ms/step - loss: 0.6912 - accuracy: 0.5147 - val_loss: 0.6928 - val_accuracy: 0.5123\n","Epoch 6/20\n","250/250 [==============================] - 4s 14ms/step - loss: 0.6910 - accuracy: 0.5148 - val_loss: 0.6940 - val_accuracy: 0.4958\n","Epoch 7/20\n","250/250 [==============================] - 2s 10ms/step - loss: 0.6892 - accuracy: 0.5177 - val_loss: 0.6945 - val_accuracy: 0.4983\n","Epoch 8/20\n","250/250 [==============================] - 2s 9ms/step - loss: 0.6868 - accuracy: 0.5195 - val_loss: 0.6998 - val_accuracy: 0.4995\n","547/547 [==============================] - 2s 4ms/step\n","Epoch 1/20\n","250/250 [==============================] - 3s 11ms/step - loss: 0.6925 - accuracy: 0.5200 - val_loss: 0.6921 - val_accuracy: 0.5115\n","Epoch 2/20\n","250/250 [==============================] - 2s 10ms/step - loss: 0.6908 - accuracy: 0.5256 - val_loss: 0.6921 - val_accuracy: 0.5238\n","Epoch 3/20\n","250/250 [==============================] - 3s 11ms/step - loss: 0.6929 - accuracy: 0.5141 - val_loss: 0.6914 - val_accuracy: 0.5428\n","Epoch 4/20\n","250/250 [==============================] - 3s 12ms/step - loss: 0.6921 - accuracy: 0.5213 - val_loss: 0.6876 - val_accuracy: 0.5415\n","Epoch 5/20\n","250/250 [==============================] - 2s 10ms/step - loss: 0.6905 - accuracy: 0.5321 - val_loss: 0.6904 - val_accuracy: 0.5242\n","Epoch 6/20\n","250/250 [==============================] - 2s 9ms/step - loss: 0.6881 - accuracy: 0.5384 - val_loss: 0.6861 - val_accuracy: 0.5440\n","Epoch 7/20\n","250/250 [==============================] - 2s 9ms/step - loss: 0.6843 - accuracy: 0.5471 - val_loss: 0.6820 - val_accuracy: 0.5462\n","Epoch 8/20\n","250/250 [==============================] - 2s 9ms/step - loss: 0.6782 - accuracy: 0.5561 - val_loss: 0.6776 - val_accuracy: 0.5493\n","Epoch 9/20\n","250/250 [==============================] - 3s 14ms/step - loss: 0.6733 - accuracy: 0.5625 - val_loss: 0.6812 - val_accuracy: 0.5523\n","Epoch 10/20\n","250/250 [==============================] - 3s 11ms/step - loss: 0.6698 - accuracy: 0.5720 - val_loss: 0.6815 - val_accuracy: 0.5477\n","Epoch 11/20\n","250/250 [==============================] - 2s 10ms/step - loss: 0.6677 - accuracy: 0.5717 - val_loss: 0.6803 - val_accuracy: 0.5415\n","Epoch 12/20\n","250/250 [==============================] - 2s 10ms/step - loss: 0.6623 - accuracy: 0.5796 - val_loss: 0.6838 - val_accuracy: 0.5437\n","479/479 [==============================] - 2s 4ms/step\n"]}]},{"cell_type":"code","source":["# Print the optimized performance metrics for each dataset\n","for key, metrics in optimized_performance_metrics.items():\n","    print(f\"Optimized performance for {key}:\")\n","    for metric, value in metrics.items():\n","        print(f\"{metric}: {value:.4f}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ntxymkisNm6a","executionInfo":{"status":"ok","timestamp":1715544329564,"user_tz":240,"elapsed":23,"user":{"displayName":"Rafiz Sadique","userId":"17589798204125157169"}},"outputId":"854d80ae-2b3c-4055-9ea1-5b7f7d10e0d1"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["Optimized performance for test_data_w:\n","Accuracy: 0.4985\n","Precision: 0.5124\n","Recall: 0.0418\n","F1 Score: 0.0773\n","Optimized performance for test_data_m:\n","Accuracy: 0.5613\n","Precision: 0.5688\n","Recall: 0.9611\n","F1 Score: 0.7147\n","Optimized performance for test_data_q:\n","Accuracy: 0.5503\n","Precision: 0.6449\n","Recall: 0.6933\n","F1 Score: 0.6682\n"]}]},{"cell_type":"markdown","source":["#Visualizations"],"metadata":{"id":"-u-FlFEeSSUh"}},{"cell_type":"code","source":["# Select some words to visualize\n","words = ['tesla', 'car', 'electric', 'stock', 'market', 'battery', 'model', 'price']\n","word_vectors = np.array([word2vec_model.wv[word] for word in words if word in word2vec_model.wv])\n","\n","# PCA to reduce to 2 dimensions\n","pca = PCA(n_components=2)\n","word_vectors_2d = pca.fit_transform(word_vectors)\n","\n","# Plotting\n","plt.figure(figsize=(10, 6))\n","plt.scatter(word_vectors_2d[:, 0], word_vectors_2d[:, 1])\n","\n","for i, word in enumerate(words):\n","    if word in word2vec_model.wv:\n","        plt.annotate(word, (word_vectors_2d[i, 0], word_vectors_2d[i, 1]))\n","\n","plt.title('Word2Vec Word Embeddings Visualization')\n","plt.xlabel('PCA Component 1')\n","plt.ylabel('PCA Component 2')\n","plt.grid(True)\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"PJJPy1PHTBVO","executionInfo":{"status":"ok","timestamp":1715544329965,"user_tz":240,"elapsed":404,"user":{"displayName":"Rafiz Sadique","userId":"17589798204125157169"}},"outputId":"25506917-2285-4086-b44b-d7099fc34193"},"execution_count":15,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# Prepare data for plotting class distribution\n","class_data = {\n","    'Dataset': [],\n","    'Class': [],\n","    'Count': []\n","}\n","\n","for key, df in dataframes.items():\n","    class_counts = df['Target'].value_counts()\n","    for class_label, count in class_counts.items():\n","        class_data['Dataset'].append(key)\n","        class_data['Class'].append(class_label)\n","        class_data['Count'].append(count)\n","\n","class_df = pd.DataFrame(class_data)\n","\n","# Plotting the class distribution\n","plt.figure(figsize=(10, 6))\n","sns.barplot(x='Dataset', y='Count', hue='Class', data=class_df)\n","plt.title('Class Distribution in Each Dataset')\n","plt.xlabel('Dataset')\n","plt.ylabel('Number of Samples')\n","plt.legend(title='Class')\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"1n3K-kG3TDOv","executionInfo":{"status":"ok","timestamp":1715544330954,"user_tz":240,"elapsed":990,"user":{"displayName":"Rafiz Sadique","userId":"17589798204125157169"}},"outputId":"5893bcd6-1f9a-4b8d-9463-df0067383d51"},"execution_count":16,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# Generate the plot\n","plot_model(optimized_lstm_model, to_file='/content/drive/My Drive/519_Project_V1/LSTM/lstm_model.png', show_shapes=True, show_layer_names=True)\n","\n","# Display the plot\n","Image('/content/drive/My Drive/519_Project_V1/LSTM/lstm_model.png')\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":754},"id":"dNHK6ls_UITq","executionInfo":{"status":"ok","timestamp":1715544331703,"user_tz":240,"elapsed":750,"user":{"displayName":"Rafiz Sadique","userId":"17589798204125157169"}},"outputId":"71b1e2dc-73e6-4b6e-d01d-d03f34d940b7"},"execution_count":17,"outputs":[{"output_type":"execute_result","data":{"image/png":"\n","text/plain":["<IPython.core.display.Image object>"]},"metadata":{},"execution_count":17}]}]}